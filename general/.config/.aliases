#!/bin/bash
# programs
alias tmux="tmux -f ~/.config/tmux/tmux.conf"
alias v="nvim"
alias vf="source _vf"
alias wezterm='flatpak run org.wezfurlong.wezterm'

alias irssi="irssi --home=~/.config/irssi --config=~/.config/irssi/config"
alias lynx="lynx -cfg=~/.config/lynx/lynx.cfg -lss=~/.config/lynx/lynx.lss"

alias srcz=". ~/.config/zsh/.zshrc"
alias srcao=". ~/.config/zsh/.aliases"
alias srca=". ~/.config/.aliases"

alias .s="nvim ~/.dotfiles/scripts/.local/share/scripts/"
alias xin='xinput map-to-output $(xinput | grep -i "pen pen"| cut -d = -f 2 | cut -d [ -f 1) DP-1'
alias r='ranger . 2>/dev/null; clear'
alias xmr="xmonad --recompile; xmonad --restart"
alias .dxm="cp ~/.config/xmonad/xmonad.hs ~/.dotfiles/xmonad/.config/xmonad/xmonad.hs; cp ~/.config/xmobar/xmobarrc1 ~/.dotfiles/xmonad/.config/xmobar/xmobarrc1; cp ~/.config/xmobar/xmobarrc2 ~/.dotfiles/xmonad/.config/xmobar/xmobarrc2"
alias rex="xrandr --output DP-1 --primary --right-of eDP-1 --auto"
alias \?="noglob ?"
alias \?g="noglob ?g"
alias \?r="noglob ?r"
alias \?s="noglob ?s"
alias dummypsql="docker run -e POSTGRES_PASSWORD=lol --name=pg -d -p 5432:5432 --rm aldevv/omdb"

alias Br="bb README.md"

alias pom1="pomo start 1h"
alias pom2="pomo start 2h"
alias pom3="pomo start 3h"

# docker
alias dkrit="docker run -it"
alias dkritr="docker run -it --rm"

# programs
alias srcdirenv='eval "$(direnv hook zsh)"'
alias srcenv='. _srcenv'
alias addpath='. _addpath'
alias G="lazygit"

alias getgi="git forgit ignore" # create git ignore 
alias qmkr="cd $HOME/qmk_firmware && make lily58:mine && make lily58:mine:flash; cd -"
alias zmkr="cd $HOME/adv360/ && make; printf 'enter bootloader mode...' ;read ans; cp firmware/*left* /Volumes/ADV360PRO/; cd - "
alias zmkcp="cd $HOME/adv360/ && cp firmware/*left* /Volumes/ADV360PRO/; cd -"
alias zmkR="cd $HOME/adv360/ && make; printf 'enter bootloader mode...' ;sleep 5 ; sudo mount /dev/sda /mnt; sudo cp firmware/*left* /mnt; cd -; sudo umount /mnt"
alias zmkcP="cd $HOME/adv360/ && cp firmware/*left* /media/kanon/ADV360PRO ; cd -"


alias fa="git forgit add"
alias fD="git forgit diff"
alias fco="git forgit checkout_branch"
alias fcO="git forgit checkout_file"
alias flg="git forgit log"
alias fR="git forgit reset_head"
alias frf="git forgit reflog"
alias fcp="git forgit cherry_pick" 

# kubernetes
alias watch='watch ' # so it catches aliases
alias kx='kubectx'
alias kns='kubens'
alias k='kubectl'
alias kc='kubectl create'
alias ka='kubectl apply'
alias kg='kubectl get'
alias kga='kubectl get all'
alias kgA='kubectl get all --all-namespaces'
alias kgn='kubectl get nodes'
alias kgp='kubectl get pods'
alias kgd='kubectl get deployments'
alias kgN='kubectl get namespaces'
alias kgs='kubectl get svc'
alias kgi='kubectl get ingress'
alias kgr='kubectl get replicasets'
alias kD='kubectl delete'
alias kd='kubectl describe'
alias kdp='kubectl describe pod'
alias kdd='kubectl describe deployment'
alias kds='kubectl describe service'
alias kdi='kubectl describe ingress'

alias kgpo='kubectl get pods -o wide'
alias kgpy='kubectl get pods -o yaml'
alias kgdy='kubectl get deployments -o yaml'
alias kgsy='kubectl get services -o yaml'
alias kgiy='kubectl get ingress -o yaml'
alias kgny='kubectl get namespaces -o yaml'



alias extract_install='. _extract_install'

# scripts
alias getlatest=". _getlatest"
alias clone=". _clone"
alias clone1=". _clone 1"

# builtin
alias c="cat"

# git
alias gt="git tag"
alias gn="git notes"
alias gna="git notes add"
alias gca="git commit --amend"
alias gce="git commit --amend --no-edit"
alias gR="git reset"
alias gRh="git reset --hard"
alias grs="git remote set-url"
alias grso="git remote set-url origin"
alias grao="git remote add origin"
alias grg="git remote get-url origin"
alias gcsr="git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
alias cop="gh copilot suggest -t shell"
alias coP="gh copilot explain"
alias yt="cd ~/.local/bin/ && yt"

alias gwts=". _gwts"

function ghp() {
  GH_FORCE_TTY=100% gh pr list | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | awk '{print $1}' | xargs gh pr diff
}

function ghpnvim() {
  pr_num="$(GH_FORCE_TTY=100% gh pr list | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | awk '{print $1}' | tr -d '#')"
  branch_name="$(gh pr list --json number --json headRefName | jq | grep -B 1 "$pr_num" | head -n 1 | awk '{print $2}' | tr -d '"' | tr -d ',')"
  git difftool --no-prompt "$branch_name"
}

function ghpo() {
  GH_FORCE_TTY=100% gh pr list | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | awk '{print $1}' | xargs gh pr checkout
}

# you can also use git show -U 25 <commit> to show more context on these patches
alias grbp="grb --show-current-patch"  # equivalent of git show REBASE_HEAD

gclb() {
	repo_dirty="${1##*/}"
	repo="${repo_dirty%.git}"
	git clone --bare --recurse-submodules "$1" "$repo"
}

alias a=". _worktree_create_branch 'second'"
alias gwta/=". _worktree_create_branch 'second'"

alias A=". _worktree_create_branch 'first'"
alias gwtA/=". _worktree_create_branch 'first'"

alias tobare=". _tobare"
alias gg='cd $(gitRoot)'

# dotfiles
alias dgp=". _dgp"
alias dgpa=". _dgpa"
alias dgpd='. _dgp $DOTFILES'
alias dgpw='. _dgp $WIKI'
alias dgpn='. _dgp $NOTES'

# development
alias sv='. _sv' # previously sa
alias sar='. installReq'
alias nixfst="nix flake show templates"
alias nixfi="nix flake init"
alias nixfit="nix flake init -t " #templates#simpleContainer
alias nixd="nix develop"
alias nix-s="nix-shell -p" # nix-shell -p cowsay --command "cowsay hello"
alias localstack="docker run --rm  -dit -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack"
alias q="tgpt -i"
alias Q="quick"
alias proto="protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative"
alias .env="sed 's/^export //g' .envrc > .env"
alias .secrets="sed 's/^export //g' .envrc > .secrets"

alias mkr="make run"

# run ubuntu and let it run in the background
ubuntu() {
docker run -d --name "$1" ubuntu tail -f /dev/null
}

# tmux
alias tms="tmux-sessionizer"

# curl
alias curlh='curl --header "Content-Type: application/json"'

# ansible
alias an="ansible"
alias anp="ansible-playbook"
ashell() {
	# a shell command
	ansible $1 -m shell -a $2
}

alias run_debian="~/.local/share/ansible/run_debian"
alias run_arch="~/.local/share/ansible/run_arch"
alias ssh_phone="ssh -p 8022 u0_a473@axlknight1-everest.nord"
alias toasc="ascii-image-converter"
alias sa="source .venv/bin/activate"

alias lilyflash="util/docker_cmd.sh make lily58:mine:flash"
alias lilycompile="util/docker_build.sh lily58:mine"
alias lilyrun="lilycompile && lilyflash"

# alias gnt="grepnotes"
# alias gwi="grepwiki"
alias lg="live_grep"
alias lgnt="lgnotes"
# functions

nord() {
	sudo nordvpn set meshnet on
	sudo nordvpn connect japan
}

nordcolombia() {
	# sudo nordvpn set meshnet on
	sudo nordvpn connect colombia
}

e.() {
	bat .env
}

nixs() {
	# run with --cache to refresh cache
	local cache_file=~/.cache/nix/nix-env-qaP

	if [[ "$1" =~ ^--?c(ache)?$ ]]; then
		mkdir -p $(dirname $cache_file)
		echo -n "Caching packages.."
		nix-env -qaP '*' >$cache_file
		echo " üèÅ"
	else
		grep -iE "$1" $cache_file
	fi
}

nixi() {
	nix-env -iA nixpkgs.$1
}



# v4l2-ctl --list-devices
# check the one you want, then do
# v4l2-ctl --device=<chosen> -c=<what you want>
# v4l2-ctl -d /dev/video4 -c focus_automatic_continuous=0
