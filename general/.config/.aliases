#!/bin/bash
# programs
alias tmux="tmux -f ~/.config/tmux/tmux.conf"
alias v="nvim"

alias irssi="irssi --home=~/.config/irssi --config=~/.config/irssi/config"
alias lynx="lynx -cfg=~/.config/lynx/lynx.cfg -lss=~/.config/lynx/lynx.lss"

alias srcz=". ~/.config/zsh/.zshrc"
alias srcao=". ~/.config/zsh/.aliases"
alias srca=". ~/.config/.aliases"

alias .s="nvim ~/.dotfiles/scripts/.local/share/scripts/"
alias xin='xinput map-to-output $(xinput | grep -i "pen pen"| cut -d = -f 2 | cut -d [ -f 1) DP-1'
alias r='ranger .'
alias xmr="xmonad --recompile; xmonad --restart"
alias .dxm="cp ~/.config/xmonad/xmonad.hs ~/.dotfiles/xmonad/.config/xmonad/xmonad.hs; cp ~/.config/xmobar/xmobarrc1 ~/.dotfiles/xmonad/.config/xmobar/xmobarrc1; cp ~/.config/xmobar/xmobarrc2 ~/.dotfiles/xmonad/.config/xmobar/xmobarrc2"
alias rex="xrandr --output DP-1 --primary --right-of eDP-1 --auto"
alias \?="noglob ?"
alias \?g="noglob ?g"
alias \?r="noglob ?r"
alias \?s="noglob ?s"
alias dummypsql="docker run -e POSTGRES_PASSWORD=lol --name=pg -d -p 5432:5432 --rm aldevv/omdb"

alias cr="bb README.md"
alias br="bb README.md"
alias Br="b README.md"

# docker
alias dkrit="docker run -it"
alias dkritr="docker run -it --rm"

# programs
alias srcdirenv='eval "$(direnv hook zsh)"'
alias srcenv='. _srcenv'

alias extract_install='. _extract_install'

# scripts
alias lg="live_grep"
alias getlatest=". _getlatest"
alias clone=". _clone"
alias clone1=". _clone 1"

# builtin
alias c="cat"
alias f="find"

# git
alias gca="git commit --amend"
alias gce="git commit --amend --no-edit"
alias gR="git reset"
alias gRh="git reset --hard"
alias grs="git remote set-url"
alias grso="git remote set-url origin"
alias grao="git remote add origin"
alias grg="git remote get-url origin"
alias gcsr="git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"

alias gwts=". _gwts"

gclb() {
	repo_dirty="${1##*/}"
	repo="${repo_dirty%.git}"
	git clone --bare --recurse-submodules "$1" "$repo"
}

alias a=". _worktree_create_branch 'second'"
alias gwta/=". _worktree_create_branch 'second'"

alias A=". _worktree_create_branch 'first'"
alias gwtA/=". _worktree_create_branch 'first'"

alias tobare=". _tobare"
alias gg='cd $(gitRoot)'

# dotfiles
alias dgp=". _dgp"
alias dgpa=". _dgpa"
alias dgpd='. _dgp $DOTFILES'
alias dgpw='. _dgp $WIKI'
alias dgpn='. _dgp $NOTES'

# development
alias sv='. _sv' # previously sa
alias sar='. installReq'
alias nixfst="nix flake show templates"
alias nixfi="nix flake init"
alias nixfit="nix flake init -t " #templates#simpleContainer
alias nixd="nix develop"
alias nix-s="nix-shell -p" # nix-shell -p cowsay --command "cowsay hello"
alias localstack="docker run --rm  -dit -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack"
alias Q="chatgpt"
alias q="quick_examples"

# tmux
alias tms="tmux-sessionizer"

# curl
alias curlh='curl --header "Content-Type: application/json"'

# ansible
alias an="ansible"
alias anp="ansible-playbook"
ashell() {
	# a shell command
	ansible $1 -m shell -a $2
}

alias run_debian="~/.local/share/ansible/run_debian"
alias run_arch="~/.local/share/ansible/run_arch"
alias ssh_phone="ssh -p 8022 u0_a473@axlknight1-everest.nord"
alias toasc="ascii-image-converter"
alias sa="source .venv/bin/activate"

# functions

nord() {
	sudo nordvpn set meshnet on
	sudo nordvpn connect japan
}

e.() {
	bat .env
}

nixs() {
	# run with --cache to refresh cache
	local cache_file=~/.cache/nix/nix-env-qaP

	if [[ "$1" =~ ^--?c(ache)?$ ]]; then
		mkdir -p $(dirname $cache_file)
		echo -n "Caching packages.."
		nix-env -qaP '*' >$cache_file
		echo " 🏁"
	else
		grep -iE "$1" $cache_file
	fi
}

nixi() {
	nix-env -iA nixpkgs.$1
}
