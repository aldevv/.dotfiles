#!/bin/bash


url="$1"
[[ -z "$url" ]] && return

# if only given author/repo
count=$(grep -o "/" <<<"$url" | wc -l)
if [[ $count -eq 1 ]] && ! grep "@" <<< "$url" &>/dev/null; then
  url="https://github.com/$url"
fi

shallow=0
if [[ "$url" =~ ^[1-9]$ ]]; then
	shallow=$url
	shift
fi

if grep "@" &>/dev/null <<<"$url"; then
	author_and_repo="$(cut -d':' -f2 <<< "$url" | cut -d'.' -f1 )"
	service="$(sed -E 's#git@([^:]+):.*#\1#' <<<"$url")"
else
	author_and_repo="$(cut -d'/' -f4- <<< "$url")"
	service="$(sed -E 's#https?://([^/]+).*#\1#' <<< "$url")"
fi




_path="$REPOS/$service/$author_and_repo"
echo "path: $_path"

if [[ ! -d "$_path" ]]; then
	mkdir -p "$_path"
else
	echo -e "\e[31m the $author_and_repo repo already exists, overwrite? [y,N]\e[0m"
	read -r ans
	if [[ -n "$ans" && "$ans" != "n" && "$ans" != "no" && "$ans" != "N" && "$ans" != "NO" ]]; then
		echo "removing: $_path"
		rm -rf "$_path"
		echo -e "\e[31m Removed old repo\e[0m"
	else
		cd "$_path" || return
		return
	fi
fi

if [[ "$(pwd)" == "$_path" ]]; then
	cd || return
fi

if [[ $shallow != 0 ]]; then
	git clone --depth "$shallow" --recursive "$url" "$_path"
else
	git clone --recursive "$url" "$_path"
fi

cd "$_path" || return
