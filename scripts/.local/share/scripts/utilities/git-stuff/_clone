#!/bin/bash


input="$1"
[[ -z "$input" ]] && return

if ! git ls-remote "$input" 1>/dev/null; then
	return
fi

# if only given author/repo
count=$(grep -o "/" <<<"$input" | wc -l)
if [[ $count -eq 1 ]] && ! grep "@" <<< "$input" &>/dev/null; then
  input="https://github.com/$input"
fi


shallow=0
if [[ "$input" =~ ^[1-9]$ ]]; then
	shallow=$input
	shift
fi

if grep "@" &>/dev/null <<<"$input"; then
	author_and_repo="$(cut -d':' -f2 <<< "$input" | cut -d'.' -f1 )"
	service="$(sed -E 's#git@([^:]+):.*#\1#' <<<"$input")"
else
	author_and_repo="$(cut -d'/' -f4- <<< "$input")"
	service="$(sed -E 's#https?://([^/]+).*#\1#' <<< "$input")"
fi




_path="$REPOS/$service/$author_and_repo"
echo "path: $_path"
if [[ ! -d "$_path" ]]; then
	mkdir -p "$_path"
else
	echo -e "\e[31m the $author/$repo repo already exists, overwrite? [y,N]\e[0m"
	read -r ans
	if [[ -n "$ans" && "$ans" != "n" && "$ans" != "no" && "$ans" != "N" && "$ans" != "NO" ]]; then
		echo "removing: $_path"
		rm -rf "$_path"
		echo -e "\e[31m Removed old repo\e[0m"
	else
		cd "$_path" || return
		return
	fi
fi

if [[ "$(pwd)" == "$_path" ]]; then
	cd || return
fi

if [[ $shallow != 0 ]]; then
	git clone --depth "$shallow" --recursive "$link" "$_path"
else
	git clone --recursive "$link" "$_path"
fi

cd "$_path" || return
