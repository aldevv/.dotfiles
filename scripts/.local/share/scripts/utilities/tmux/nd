#!/bin/bash

as_argument() {
	[[ $1 == code ]] && _type="code" && shift && return
	[[ $1 == project ]] && _type="project" && shift && return
	[[ $1 == work ]] && _type="work" && shift && return
	[[ $1 == tmp ]] && _type="tmp" && shift && return
}

as_argument "$@"
if [[ -z "$_type" ]]; then
	_type=$(
		fzf --no-preview --prompt="Enter type: "<<EOF
code
project
work
learn
tmp
EOF
	)
fi

[ -z "$_type" ] && exit 1

declare -A types=(["code"]="$CODE" ["project"]="$PROJECTS" ["work"]="$WORK" ["tmp"]="/tmp" ["learn"]="$LEARN")

echo -e -n "\e[34mEnter name: "
read -r name
folder="${types[$_type]}/$name"
# if folder exists, keep asking for other name
while [ -d "$folder" ]; do
	echo -e -n "\e[31mName already exists...\n"
	echo -e -n "\e[34mEnter name: "
	read -r name
	folder="${types[$_type]}/$name"
done

open_nvim_if_flag() {
	if [[ "$1" == "v" || "$1" == "nvim" ]]; then
		tmux send-keys -t "$name" "nvim ." Enter
	fi
}

mkdir -p "$folder"

if [[ -z $TMUX ]]; then
	tmux -f ~/.config/tmux/tmux.conf new -ds "${_type:0:1}-$name" -c "$folder"
	open_nvim_if_flag "$@"
	exec tmux attach -t "${_type:0:1}-$name"
	exit
fi

if ! tmux has-session -t "${_type:0:1}-$name" 2>/dev/null; then
	tmux -f ~/.config/tmux/tmux.conf new -ds "${_type:0:1}-$name" -c "$folder"
	open_nvim_if_flag "$@"
	if ! tmux switch-client -t "${_type:0:1}-$name" 2>/dev/null; then
		echo "third"
		exec tmux attach -t "${_type:0:1}-$name"
	fi
fi
