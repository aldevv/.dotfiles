#!/bin/bash
NOTES="${NOTES:-$HOME/notes}"
name="$(date +%d%m%y).md"
# more than 20 days, save to archive
time_limit_to_archive="20"

# you can add subfolders of any depth like this
# sub: math/calculus/2022
# and then giving the subject
# subject: integrals

# you can also do multiple levels, like
# nt work complexity a1
# and it will create $NOTES/work/complexity/a1/28112022.md

# ntf to send files to subject/.files/

find_notes() {
    find "$1" -mindepth 1 -not -path '*/.git*' -not -path '*/.files*' -not -path '*/.archive/*' -type d 2>/dev/null
}

find_notes_depth() {
    find "$1" -mindepth 1 -maxdepth 1 -not -path '*/.git*' -not -path '*/.files*' -not -path '*/.archive/*' -type d 2>/dev/null
}

find_include_archive() {
    find "$1" -mindepth 1 -maxdepth 1 -not -path '*/.git*' -not -path '*/.files*' -type d 2>/dev/null
}

save_in_archive_old_notes() {
    files_to_archive="$(find "$NOTES" -mindepth 1 -not -path '*/.archive*' -not -path '*/.git*' -not -path '*/.files*' -type d -mtime "+$time_limit_to_archive")"
    for f in $files_to_archive; do
        local sub=${f%/*}
        local sub_no_path="${sub/$NOTES/}"
        sub=$NOTES/.archive
        if [[ -n "$sub_no_path" ]]; then
            sub+="$sub_not_path"
        fi
        mkdir -p "$sub"
        mv "$f" "$sub/"
    done
}


if [[ ! -d "$NOTES/.archive" ]]; then
    mkdir -p "$NOTES/.archive"
fi

save_in_archive_old_notes

is_new=0
is_list=0
is_dmenu=0
is_files=0
[[ "$1" == "new" ]] && is_new=1 && shift
[[ "$1" == "list" ]] && is_list=1 && shift
[[ "$1" == "dmenu" ]] && is_dmenu=1 && shift
[[ "$1" == "files" ]] && is_files=1 && shift

if [[ $is_new == 1 && $is_list == 1 ]]; then
    echo -e "\e[31mThese 2 options are exclusive bro"
    exit
fi

# sub-dir logic
sub=""
if [[ -n "$1" ]]; then
    if [[ -z "$2" ]]; then
        subject="$NOTES/$1"
    else
        sub="$NOTES/$1"
        subject="$2"
        shift
        while [[ -n $2 ]]; do
           sub="$sub/$subject"
           subject="$2"
           shift
       done
    fi
fi


if [[ $is_dmenu == 1 ]]; then
    if [[ -z "$subject" ]]; then
        subject="$(echo -e "$(fd . "$NOTES" -t d -x basename )\nnew" | dmenu 2>/dev/null )"
    fi

    if [[ $subject == "new" ]]; then
        is_new_sub="$(dmenu -p "is it a sub-dir?" 2>/dev/null <<< "$(echo -e "yes\nno")")"
        if [[ "$is_new_sub" == "yes" ]]; then
            sub="$NOTES/$(dmenu -p "Enter new sub-dir: " 2>/dev/null <<< "$(echo -e "")")"
            if [[ ! -d $sub ]]; then
                mkdir "$sub"
            fi
            subject="$(dmenu -p "Enter subject name: " 2>/dev/null <<< "$(echo -e "")")"
            _path="$sub/$subject"
        else
            subject="$(dmenu -p "Enter subject name: " 2>/dev/null <<< "$(echo -e "")")"
            _path="$NOTES/$subject"
        fi
        session_name="$(basename "$_path")"
        tmux-sessionizer-cmd "$_path" "nvim $_path/$name" "$session_name"  "new_window"
        exit
    fi

    subject="$NOTES/$subject"
    is_sub=0
    if [[ -n "$(find_notes "$subject")" ]]; then
        is_sub=1
        sub=$subject
        subject=$(echo -e "$(fd . "$subject" -t d -x basename)" | dmenu 2>/dev/null)
    fi

    if [[ $is_sub == 1 ]]; then
        _path="$sub/$subject"
    else
        _path="$subject"
    fi
    session_name="$(basename "$_path")"
    tmux-sessionizer-cmd "$_path" "nvim $_path/$name" "$session_name" "new_window"
    exit

fi



if [[ -z "$subject" ]]; then
    # put space because it wasn't picking up the preview
    subject=$(echo -e "$(find_notes $NOTES)\n\e[35mnew \n\e[35mlist\n\e[35mfiles" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")

    [[ -z "$subject" ]] && exit
    [[ "$subject" == "new " ]] && is_new=1 && subject="$NOTES"
    [[ "$subject" == "list" ]] && is_list=1 && subject="$NOTES"
    [[ "$subject" == "files" ]] && is_files=1 && subject="$NOTES"
fi


# this is for cases when you do "nt something"  and then want to list, new or files
if [[ $is_new == 0 && $is_list == 0 && $is_files == 0 && -n "$(find_include_archive "$sub/$subject")" ]]; then
    original="$sub/$subject"
    subject=$(echo -e "$(find_include_archive "$sub/$subject")\n\e[35mnew \n\e[35mlist\n\e[35mfiles"  | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")

    mode_chosen=0
    [[ -z "$subject" ]] && exit
    [[ "$subject" == "new " ]] && is_new=1 && subject="$NOTES" && mode_chosen=1
    [[ "$subject" == "list" ]] && is_list=1 && subject="$NOTES" && mode_chosen=1
    [[ "$subject" == "files" ]] && is_files=1 && subject="$NOTES" && mode_chosen=1

    if [[ $mode_chosen == 1 ]]; then
        subject="$original"
    else
        while [[ -n $(find_include_archive "$subject") ]]; do
            subject=$(echo -e "$(find_include_archive "$subject")" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")
        done
    fi
fi


if [[ $is_files == 1 ]]; then
    while [[ -n $(find_include_archive "$subject") && ! -d "$subject/.files" ]]; do
        pattern="$(echo -e "$(fd . "$subject" -t d -x bash -c "if [[ -f {} ]]; then echo {}; else if [[ -d {}/.files ]]; then echo {}; fi; fi")")"
        [[ -z $pattern ]] && echo -e "\e[35m \"$(basename "$subject")\" or it's subfolders have no .files folder" && exit 1
        subject=$(echo -e "$pattern" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {}/.files --color=always || chafa $FILES/fun/kaguya.jpg")
    done
    [[ -z "$subject" ]] && exit
    _path="$subject"
    [[ ! -d $_path/.files ]] && echo -e "\e[35m $(basename "$_path") has no .files folder" && exit 1
    tmux-sessionizer-cmd "$_path" "cd $_path/.files" "$(basename "$_path")-files"
    exit 0
fi

if [[ $is_list == 1 ]]; then

    # if it has folders, is a sub
    while [[ -n $(find_include_archive "$subject") ]]; do
        subject=$(echo -e "$(find_notes_depth "$subject")" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")
    done

    [[ -z "$subject" ]] && exit

    # list files content
    chosen_file=$(find "$subject" -mindepth 1 -maxdepth 1 -not -path '*/.*' -printf '%f\n' 2>/dev/null | fzf --preview="[[ -f $subject/{} ]] && bat $subject/{} || bat $subject/.files/{} --color=always")

    [[ -z "$chosen_file" ]] && exit
    _path="$subject"
    tmux-sessionizer-cmd "$_path" "nvim $_path/$chosen_file" "$(basename "$_path")" 
    exit
fi

if [[ $is_new == 1 ]]; then
    base="$subject"
    is_new_sub="$(fzf --no-preview --prompt="is it a sub-dir?" <<< "$(echo -e "yes\nno")")"
    [[ -z "$is_new_sub" ]] && exit 0

    if [[ "$is_new_sub" == "yes" ]]; then
        echo -e "\e[35mEnter new sub-dir"
        read -r sub
        [[ -z "$sub" ]] && exit 0

        sub="$base/$sub"
    fi

    subject=""
    echo -e "\e[35mEnter new subject"
    read -r subject
    [[ -z "$subject" ]] && exit 0
    if [[ "$is_new_sub" != "yes" ]]; then
        subject="$base/$subject"
    fi
fi

retrieve_notes_from_archive() { 
    [[ -z "$1" && -z "$2" ]] && return 


    local sub="$1"
    local subject="$2"
    local archive_sub="$NOTES/.archive"

    local sub_no_path="${sub/$NOTES/}"
    if [[ -n "$sub_no_path" ]]; then
        archive_sub+="/$sub_no_path"
    fi

    # if chose an archived file, then make it into a normal path, so it moves it correctly
    notes_in_archive=$(find "$NOTES/.archive" -wholename "$archive_sub/$subject" -type d)

    [[ -z $notes_in_archive ]] && return 1

    mkdir -p "$sub"
    mv "$notes_in_archive" "$sub"
    if [[ -z $(find "$archive_sub" -mindepth 1 -maxdepth 1) ]]; then
        rm -r "$archive_sub" 
    fi
    return 0
}

if [[ -z "$sub" ]]; then
    sub="${subject%/*}"
    subject="$(basename "$subject")"
    # format if there's 2 //
    if [[ "$sub" =~ ^// ]]; then
        sub="${sub#/}"
    fi
fi

if grep ".archive" <<< "$sub"; then
    sub="${sub/$NOTES\/.archive/$NOTES}"
fi
retrieve_notes_from_archive "$sub" "$subject"


_path="$sub/$subject"
if [[ ! -d "$_path" ]]; then
    mkdir -p "$_path"
fi

[[ -z "$_path" ]] && exit
tmux-sessionizer-cmd "$_path" "nvim $_path/$name" "$(basename "$_path")"
