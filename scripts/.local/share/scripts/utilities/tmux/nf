#!/usr/bin/env bash

selected="${1:-}"
depth="${2:-1}"
manual=0

fzf_with_nth() {
	[[ -z $depth ]] && echo "-2,-1" && return

	value=""
	for i in $(seq "$depth" -1 1); do
		if [[ $i != 1 ]]; then
			value+="-$i,"
		else
			value+="-$i"
		fi
	done
	echo "$value"
}


# folders=("$WORK" "$PROJECTS" "$CODE" "$LEARN" $REPOS/*)
folders=("$WORK" "$PROJECTS" "$CODE" "$LEARN")
if [[ -d $REPOS ]] && [[ -n $(ls -A $REPOS) ]]; then
    for org in "$REPOS"/*; do
        if [[ -d $org ]]; then
            for author in "$org"/*; do
                if [[ -d $author ]]; then
                            folders+=("$author")
                fi
            done
        fi
    done
fi

folders_result=""
if [[ -z "$selected" ]]; then
	# the -not -path is to ignore hidden folders
	# find_args=(-L "${folders[@]}" -mindepth 1 -maxdepth 1 -not -path '*/\.*' -type d -printf "%T@ %Tc %p\n")
	for f in "${folders[@]}"; do
    # %A@ access time in seconds
    # %C@ change time in seconds
		# find_args=(-L "$f" -mindepth 1 -maxdepth 1 -not -path '*/\.*' -type d -printf "%A@ %Ac %p\n")
		find_args=(-L "$f" -mindepth 1 -maxdepth 1 -not -path '*/\.*' -type d -printf "%C@ %Cc %p\n")
		next_folder="$(find "${find_args[@]}" | sort -nr | awk '{print $NF}')"

    if [[ -z $next_folder ]]; then
      continue
    fi

    if [[ -z $folders_result ]]; then
      folders_result="$next_folder"
    else
      folders_result="${folders_result}\n$next_folder"
    fi
	done
	selected=$(echo -e "$folders_result" | fzf --preview="ls {} --color=always" --delimiter / --with-nth -2,-1 --preview-window=60%:wrap | awk '{print $NF}')
else
	manual=1
	with_nth=$(fzf_with_nth)
	find_args=(-L "$selected" -mindepth "$depth" -maxdepth "$depth" -not -path '*/\.*' -type d -printf "%T@ %Tc %p\n")
	folders_result="$(find "${find_args[@]}" | sort -nr | awk '{print $NF}')"
	selected=$(echo -e "$folders_result" | fzf --preview="ls {} --color=always" --delimiter / --with-nth "$with_nth" --preview-window=60%:wrap | awk '{print $NF}')
fi

[[ -z $selected ]] && exit 0

if [[ $manual == 1 ]]; then
	tmux-sessionizer "$selected" "$(basename $selected)"
	exit 0
fi

declare -A types=(["work"]="$WORK" ["projects"]="$PROJECTS" ["code"]="$CODE" ["learn"]="$LEARN")
selected_name=$(basename "$selected" | tr . _)
for key in "${!types[@]}"; do
	if grep -o "/$key/" <<<"$selected" &>/dev/null; then
		prefix="${key:0:1}"
	fi
done
useprefix=true
[[ -z $prefix ]] && useprefix=false

if [[ $useprefix == true ]]; then
	tmux-sessionizer "$selected" "$prefix-$selected_name"
else
	tmux-sessionizer "$selected" "$selected_name"
fi
