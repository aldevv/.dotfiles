#!/bin/bash
NOTES="${NOTES:-$HOME/notes}"
name="$(date +%d%m%y).md"
# more than 20 days, save to archive
time_limit_to_archive="20"

# you can add subfolders of any depth like this
# sub: math/calculus/2022
# and then giving the subject
# subject: integrals

# you can also do multiple levels, like
# nt work complexity a1
# and it will create $NOTES/work/complexity/a1/28112022.md

# TODO: add a way to go to .data fast

save_in_archive_old_notes() {
    find "$NOTES" -mindepth 1 -not -path '*/.archive/*' -type d -mtime "+$time_limit_to_archive" | xargs -n1 -I{} mv {} "$NOTES/.archive/"
}


if [[ ! -d "$NOTES/.archive" ]]; then
    mkdir -p "$NOTES/.archive"
fi

save_in_archive_old_notes

is_new=0
is_list=0
is_dmenu=0
is_files=0
[[ "$1" == "new" ]] && is_new=1 && shift
[[ "$1" == "list" ]] && is_list=1 && shift
[[ "$1" == "dmenu" ]] && is_dmenu=1 && shift
[[ "$1" == "files" ]] && is_files=1 && shift

if [[ $is_new == 1 && $is_list == 1 ]]; then
    echo -e "\e[31mThese 2 options are exclusive bro"
    exit
fi

# sub-dir logic
sub=""
if [[ -n "$1" ]]; then
    if [[ -z "$2" ]]; then
        subject="$NOTES/$1"
    else
        sub="$NOTES/$1"
        subject="$2"
        shift
        while [[ -n $2 ]]; do
           sub="$sub/$subject"
           subject="$2"
           shift
       done
    fi
fi

if [[ $is_dmenu == 1 ]]; then
    if [[ -z "$subject" ]]; then
        subject="$(echo -e "$(fd . "$NOTES" -t d -x basename )\nnew" | dmenu 2>/dev/null )"
    fi

    if [[ $subject == "new" ]]; then
        is_new_sub="$(dmenu -p "is it a sub-dir?" 2>/dev/null <<< "$(echo -e "yes\nno")")"
        if [[ "$is_new_sub" == "yes" ]]; then
            sub="$NOTES/$(dmenu -p "Enter new sub-dir: " 2>/dev/null <<< "$(echo -e "")")"
            if [[ ! -d $sub ]]; then
                mkdir "$sub"
            fi
            subject="$(dmenu -p "Enter subject name: " 2>/dev/null <<< "$(echo -e "")")"
            _path="$sub/$subject"
        else
            subject="$(dmenu -p "Enter subject name: " 2>/dev/null <<< "$(echo -e "")")"
            _path="$NOTES/$subject"
        fi
        session_name="$(basename "$_path")"
        tmux-sessionizer-cmd "$_path" "nvim $_path/$name" "$session_name"  "new_window"
        exit
    fi

    subject="$NOTES/$subject"
    is_sub=0
    if [[ -n "$(find "$subject" -mindepth 1 -type d -not -path '*/.*')" ]]; then
        is_sub=1
        sub=$subject
        subject=$(echo -e "$(fd . "$subject" -t d -x basename)" | dmenu 2>/dev/null)
    fi

    if [[ $is_sub == 1 ]]; then
        _path="$sub/$subject"
    else
        _path="$subject"
    fi
    session_name="$(basename "$_path")"
    tmux-sessionizer-cmd "$_path" "nvim $_path/$name" "$session_name" "new_window"
    exit

fi

if [[ -z "$subject" ]]; then
    # put space because it wasn't picking up the preview
    subject=$(echo -e "$(fd . "$NOTES" -t d)\nnew \nlist\nfiles" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")
fi

[[ -z "$subject" ]] && exit

# put space because it wasn't picking up the preview
[[ "$subject" == "new " ]] && is_new=1 && subject=""
[[ "$subject" == "list" ]] && is_list=1 && subject="$NOTES"
[[ "$subject" == "files" ]] && is_files=1 && subject="$NOTES"

if [[ $is_files == 1 ]]; then
    while [[ -n $(find "$subject" -mindepth 1 -maxdepth 1 -type d -not -path '*/.*' 2>/dev/null) ]]; do
        subject=$(echo -e "$(fd . "$subject" -t d -d 1)" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")
    done
    _path="$subject"
    tmux-sessionizer-cmd "$_path" "cd $_path/.files" "$(basename "$_path")-files"
    exit 0
fi

if [[ $is_list == 1 ]]; then

    # if it has folders, is a sub
    while [[ -n $(find "$subject" -mindepth 1 -maxdepth 1 -type d -not -path '*/.*' 2>/dev/null) ]]; do
        subject=$(echo -e "$(fd . "$subject" -t d -d 1)" | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")
    done

    [[ -z "$subject" ]] && exit

    # list files content
    chosen_file=$(find "$subject" -mindepth 1 -maxdepth 1 -not -path '*/.*' -printf '%f\n' 2>/dev/null | fzf --preview="[[ -f $subject/{} ]] && bat $subject/{} || bat $subject/.files/{} --color=always")

    [[ -z "$chosen_file" ]] && exit
    _path="$subject"
    tmux-sessionizer-cmd "$_path" "nvim $_path/$chosen_file" "$(basename "$_path")" 
    exit
fi

if [[ $is_new == 1 ]]; then
    is_new_sub="$(fzf --no-preview --prompt="is it a sub-dir?" <<< "$(echo -e "yes\nno")")"
    [[ -z "$is_new_sub" ]] && exit 0

    if [[ "$is_new_sub" == "yes" ]]; then
        echo -e "\e[35mEnter new sub-dir"
        read -r sub
        [[ -z "$sub" ]] && exit 0
        sub="$NOTES/$sub"
    fi

    if [[ -z "$subject" ]]; then
        echo -e "\e[35mEnter new subject"
        read -r subject
        [[ -z "$subject" ]] && exit 0
        if [[ "$is_new_sub" != "yes" ]]; then
            subject="$NOTES/$subject"
        fi
    fi
fi

retrieve_notes_from_archive() { 
    if [[ -z "$1" && -z "$2" ]]; then
        return 
    fi

    if [[ -z "$1" ]]; then
        subject="$2"
        notes_in_archive=$(find "$NOTES/.archive" -wholename "$NOTES/.archive/${subject/$NOTES\//}" -type d)
    else
        sub="$1"
        subject="$2"
        notes_in_archive=$(find "$NOTES/.archive" -wholename "$NOTES/.archive/${sub/$NOTES\//}/$subject" -type d)
    fi

    if [[ -n $notes_in_archive ]]; then
        if [[ -z "$sub" ]]; then
            mv "$notes_in_archive" "$NOTES/"
        else
            mkdir -p "$sub"
            mv "$notes_in_archive" "$sub"
            if [[ -z $(find "${notes_in_archive%/*}" -mindepth 1 -type f) ]]; then
                rm -r "$NOTES/.archive/${sub/$NOTES\//}"
            fi
        fi
    fi
}

retrieve_notes_from_archive "$sub" "$subject"

if [[ -z "$sub" ]]; then
    _path="$subject"
else
    _path="$sub/$subject"
fi

if [[ ! -d "$_path" ]]; then
    mkdir -p "$_path"
fi

# if it has sub-dir, keep querying until you get exact sub-dir you want
while [[ -n $(find "$_path" -mindepth 1 -maxdepth 1 -type d -not -path '*/.*' 2>/dev/null) ]]; do
    _path=$(fd . "$_path" -t d -d 1  | fzf --delimiter / --with-nth -1 --preview="[ -d {} ] && ls {} --color=always || chafa $FILES/fun/kaguya.jpg")
done
[[ -z "$_path" ]] && exit
tmux-sessionizer-cmd "$_path" "nvim $_path/$name" "$(basename "$_path")"
